In this notebook we try to practice all the classification algorithms that we learned in this course.

We load a dataset using Pandas library, and apply the following algorithms, and find the best one for this specific dataset by accuracy evaluation methods.

Lets first load required libraries:

In [2]:
import itertools
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.ticker import NullFormatter
import pandas as pd
import numpy as np
import matplotlib.ticker as ticker
from sklearn import preprocessing
%matplotlib inline
In [3]:
# setting the random seed for similar results on each run
np.random.seed(7)
About dataset
This dataset is about past loans. The Loan_train.csv data set includes details of 346 customers whose loan are already paid off or defaulted. It includes following fields:

Field	Description
Loan_status	Whether a loan is paid off on in collection
Principal	Basic principal loan amount at the
Terms	Origination terms which can be weekly (7 days), biweekly, and monthly payoff schedule
Effective_date	When the loan got originated and took effects
Due_date	Since it’s one-time payoff schedule, each loan has one single due date
Age	Age of applicant
Education	Education of applicant
Gender	The gender of applicant
Lets download the dataset

In [4]:
!wget -O loan_train.csv https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/ML0101ENv3/labs/loan_train.csv
--2019-02-02 07:01:16--  https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/ML0101ENv3/labs/loan_train.csv
Resolving s3-api.us-geo.objectstorage.softlayer.net (s3-api.us-geo.objectstorage.softlayer.net)... 67.228.254.193
Connecting to s3-api.us-geo.objectstorage.softlayer.net (s3-api.us-geo.objectstorage.softlayer.net)|67.228.254.193|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 23101 (23K) [text/csv]
Saving to: ‘loan_train.csv’

100%[======================================>] 23,101      --.-K/s   in 0.002s  

2019-02-02 07:01:17 (11.7 MB/s) - ‘loan_train.csv’ saved [23101/23101]

Load Data From CSV File
In [5]:
df = pd.read_csv('loan_train.csv')
df.head()
Out[5]:
Unnamed: 0	Unnamed: 0.1	loan_status	Principal	terms	effective_date	due_date	age	education	Gender
0	0	0	PAIDOFF	1000	30	9/8/2016	10/7/2016	45	High School or Below	male
1	2	2	PAIDOFF	1000	30	9/8/2016	10/7/2016	33	Bechalor	female
2	3	3	PAIDOFF	1000	15	9/8/2016	9/22/2016	27	college	male
3	4	4	PAIDOFF	1000	30	9/9/2016	10/8/2016	28	college	female
4	6	6	PAIDOFF	1000	30	9/9/2016	10/8/2016	29	college	male
In [6]:
df.shape
Out[6]:
(346, 10)
Convert to date time object
In [7]:
df['due_date'] = pd.to_datetime(df['due_date'])
df['effective_date'] = pd.to_datetime(df['effective_date'])
df.head()
Out[7]:
Unnamed: 0	Unnamed: 0.1	loan_status	Principal	terms	effective_date	due_date	age	education	Gender
0	0	0	PAIDOFF	1000	30	2016-09-08	2016-10-07	45	High School or Below	male
1	2	2	PAIDOFF	1000	30	2016-09-08	2016-10-07	33	Bechalor	female
2	3	3	PAIDOFF	1000	15	2016-09-08	2016-09-22	27	college	male
3	4	4	PAIDOFF	1000	30	2016-09-09	2016-10-08	28	college	female
4	6	6	PAIDOFF	1000	30	2016-09-09	2016-10-08	29	college	male
Data visualization and pre-processing
Let’s see how many of each class is in our data set

In [8]:
df['loan_status'].value_counts()
Out[8]:
PAIDOFF       260
COLLECTION     86
Name: loan_status, dtype: int64
260 people have paid off the loan on time while 86 have gone into collection

Lets plot some columns to underestand data better:

In [9]:
# notice: installing seaborn might takes a few minutes
# !conda install -c anaconda seaborn -y
In [10]:
import seaborn as sns

bins = np.linspace(df.Principal.min(), df.Principal.max(), 10)
g = sns.FacetGrid(df, col="Gender", hue="loan_status", palette="Set1", col_wrap=2)
g.map(plt.hist, 'Principal', bins=bins, ec="k")

g.axes[-1].legend()
plt.show()

In [11]:
bins = np.linspace(df.age.min(), df.age.max(), 10)
g = sns.FacetGrid(df, col="Gender", hue="loan_status", palette="Set1", col_wrap=2)
g.map(plt.hist, 'age', bins=bins, ec="k")

g.axes[-1].legend()
plt.show()

Pre-processing: Feature selection/extraction
Lets look at the day of the week people get the loan
In [12]:
df['dayofweek'] = df['effective_date'].dt.dayofweek
bins = np.linspace(df.dayofweek.min(), df.dayofweek.max(), 10)
g = sns.FacetGrid(df, col="Gender", hue="loan_status", palette="Set1", col_wrap=2)
g.map(plt.hist, 'dayofweek', bins=bins, ec="k")
g.axes[-1].legend()
plt.show()

Lets look at the Months people get the loan
In [13]:
df['Month'] = df.due_date.dt.month
bins = np.linspace(df.Month.min()-1, df.Month.max()+1, 10)
g = sns.FacetGrid(df, col="Gender", hue="loan_status", palette="Set1", col_wrap=2)
g.map(plt.hist, 'Month', bins=bins, ec="k")
g.axes[-1].legend()
plt.show()

there is higher possibility that people pay off the loan in 9th month than paying it in 10th or 11th
as the observation shows people who get the loan at the end of the week don't pay it off, so lets use Feature binarization to set a threshold values less then day 4
In [14]:
df['weekend'] = df['dayofweek'].apply(lambda x: 1 if (x>3)  else 0)
df.head()
Out[14]:
Unnamed: 0	Unnamed: 0.1	loan_status	Principal	terms	effective_date	due_date	age	education	Gender	dayofweek	Month	weekend
0	0	0	PAIDOFF	1000	30	2016-09-08	2016-10-07	45	High School or Below	male	3	10	0
1	2	2	PAIDOFF	1000	30	2016-09-08	2016-10-07	33	Bechalor	female	3	10	0
2	3	3	PAIDOFF	1000	15	2016-09-08	2016-09-22	27	college	male	3	9	0
3	4	4	PAIDOFF	1000	30	2016-09-09	2016-10-08	28	college	female	4	10	1
4	6	6	PAIDOFF	1000	30	2016-09-09	2016-10-08	29	college	male	4	10	1
Convert Categorical features to numerical values
Lets look at gender:

In [15]:
df.groupby(['Gender'])['loan_status'].value_counts(normalize=True)
Out[15]:
Gender  loan_status
female  PAIDOFF        0.865385
        COLLECTION     0.134615
male    PAIDOFF        0.731293
        COLLECTION     0.268707
Name: loan_status, dtype: float64
86 % of female pay there loans while only 73 % of males pay there loan

Lets convert male to 0 and female to 1:

In [16]:
df['Gender'].replace(to_replace=['male','female'], value=[0,1],inplace=True)
df.head()
Out[16]:
Unnamed: 0	Unnamed: 0.1	loan_status	Principal	terms	effective_date	due_date	age	education	Gender	dayofweek	Month	weekend
0	0	0	PAIDOFF	1000	30	2016-09-08	2016-10-07	45	High School or Below	0	3	10	0
1	2	2	PAIDOFF	1000	30	2016-09-08	2016-10-07	33	Bechalor	1	3	10	0
2	3	3	PAIDOFF	1000	15	2016-09-08	2016-09-22	27	college	0	3	9	0
3	4	4	PAIDOFF	1000	30	2016-09-09	2016-10-08	28	college	1	4	10	1
4	6	6	PAIDOFF	1000	30	2016-09-09	2016-10-08	29	college	0	4	10	1
In [17]:
df['deadline']=df['due_date']-df['effective_date']

df.head()
Out[17]:
Unnamed: 0	Unnamed: 0.1	loan_status	Principal	terms	effective_date	due_date	age	education	Gender	dayofweek	Month	weekend	deadline
0	0	0	PAIDOFF	1000	30	2016-09-08	2016-10-07	45	High School or Below	0	3	10	0	29 days
1	2	2	PAIDOFF	1000	30	2016-09-08	2016-10-07	33	Bechalor	1	3	10	0	29 days
2	3	3	PAIDOFF	1000	15	2016-09-08	2016-09-22	27	college	0	3	9	0	14 days
3	4	4	PAIDOFF	1000	30	2016-09-09	2016-10-08	28	college	1	4	10	1	29 days
4	6	6	PAIDOFF	1000	30	2016-09-09	2016-10-08	29	college	0	4	10	1	29 days
In [18]:
df['deadline']=df['deadline'].dt.days
df.head(3)
Out[18]:
Unnamed: 0	Unnamed: 0.1	loan_status	Principal	terms	effective_date	due_date	age	education	Gender	dayofweek	Month	weekend	deadline
0	0	0	PAIDOFF	1000	30	2016-09-08	2016-10-07	45	High School or Below	0	3	10	0	29
1	2	2	PAIDOFF	1000	30	2016-09-08	2016-10-07	33	Bechalor	1	3	10	0	29
2	3	3	PAIDOFF	1000	15	2016-09-08	2016-09-22	27	college	0	3	9	0	14
*based on the tested rusults columns Month and deadline doesn't improve the result so we will not use them in feature sets of training
One Hot Encoding
How about education?
In [19]:
df.groupby(['education'])['loan_status'].value_counts(normalize=True)
Out[19]:
education             loan_status
Bechalor              PAIDOFF        0.750000
                      COLLECTION     0.250000
High School or Below  PAIDOFF        0.741722
                      COLLECTION     0.258278
Master or Above       COLLECTION     0.500000
                      PAIDOFF        0.500000
college               PAIDOFF        0.765101
                      COLLECTION     0.234899
Name: loan_status, dtype: float64
There are only two people with Master or Above degress,one of them has paid off the loan and the other one hasn't.As a result keeping 'Master or Above' in our data set wont't help much! so we drop it.

In [20]:
len(df[df.education=='Master or Above'])
Out[20]:
2
We use one hot encoding technique to convert categorical variables to binary variables and append them to the feature Data Frame
In [21]:
Feature = df[['Principal','terms','age','Gender','weekend','dayofweek']]
Feature = pd.concat([Feature,pd.get_dummies(df['education'])], axis=1)
Feature.drop(['Master or Above'], axis = 1,inplace=True)
Feature.head()
Out[21]:
Principal	terms	age	Gender	weekend	dayofweek	Bechalor	High School or Below	college
0	1000	30	45	0	0	3	0	1	0
1	1000	30	33	1	0	3	1	0	0
2	1000	15	27	0	0	3	0	0	1
3	1000	30	28	1	1	4	0	0	1
4	1000	30	29	0	1	4	0	0	1
Feature selection
Our data without label
In [22]:
X = Feature
X[0:5]
Out[22]:
Principal	terms	age	Gender	weekend	dayofweek	Bechalor	High School or Below	college
0	1000	30	45	0	0	3	0	1	0
1	1000	30	33	1	0	3	1	0	0
2	1000	15	27	0	0	3	0	0	1
3	1000	30	28	1	1	4	0	0	1
4	1000	30	29	0	1	4	0	0	1
Our labels
In [23]:
# We encode our labels as 0 and 1 s
y = df['loan_status'].replace(to_replace=['PAIDOFF','COLLECTION'], value=[0,1]).values
y[0:5]
Out[23]:
array([0, 0, 0, 0, 0])
Normalize Data
Data Standardization give data zero mean and unit variance

In [24]:
X= preprocessing.StandardScaler().fit_transform(X)
X[0:5]
Out[24]:
array([[ 0.51578458,  0.92071769,  2.33152555, -0.42056004, -1.20577805,
        -0.26122054, -0.38170062,  1.13639374, -0.86968108],
       [ 0.51578458,  0.92071769,  0.34170148,  2.37778177, -1.20577805,
        -0.26122054,  2.61985426, -0.87997669, -0.86968108],
       [ 0.51578458, -0.95911111, -0.65321055, -0.42056004, -1.20577805,
        -0.26122054, -0.38170062, -0.87997669,  1.14984679],
       [ 0.51578458,  0.92071769, -0.48739188,  2.37778177,  0.82934003,
         0.12175534, -0.38170062, -0.87997669,  1.14984679],
       [ 0.51578458,  0.92071769, -0.3215732 , -0.42056004,  0.82934003,
         0.12175534, -0.38170062, -0.87997669,  1.14984679]])
In [25]:
# import scoring methods
from sklearn.metrics import jaccard_similarity_score
from sklearn.metrics import f1_score
from sklearn.metrics import log_loss
from sklearn.model_selection import cross_val_score
In [26]:
# our data for training (used '_train' just for improving readability)
X_train, y_train=X,y
In [27]:
X_train.shape, y_train.shape
Out[27]:
((346, 9), (346,))
In [28]:
# a dictionary for keeping all scores of the classifiers
trainScores={}
K Nearest Neighbor(KNN)
In [29]:
from sklearn.neighbors import KNeighborsClassifier

bestScore=0.0
accList=[]

for k in range(3,12):
    
    clf_knn = KNeighborsClassifier(n_neighbors=k,algorithm='auto')
    
    # using 10 fold cross validation for scoring the classifier's accuracy
    scores = cross_val_score(clf_knn, X, y, cv=10)
    score=scores.mean()
    accList.append(score)
    
    if score > bestScore:
        bestScore=score
        best_clf=clf_knn
        bestK=k
        
print("Best K is :",bestK,"| Cross validation Accuracy :",bestScore)
clf_knn=best_clf
Best K is : 8 | Cross validation Accuracy : 0.752268907563
In [30]:
clf_knn.fit(X_train,y_train)
y_pred=best_clf.predict(X_train)
In [31]:
trainScores['KNN-jaccard']=jaccard_similarity_score(y_train, y_pred)
trainScores['KNN-f1-score']=f1_score(y_train, y_pred, average='weighted')
In [32]:
trainScores
Out[32]:
{'KNN-f1-score': 0.77018435586819922, 'KNN-jaccard': 0.7947976878612717}
In [33]:
plt.plot(range(3,12),accList)
plt.xlabel('K')
plt.ylabel('CV Accuracy')
plt.show()

Decision Tree
In [34]:
from sklearn import tree

clf_tree = tree.DecisionTreeClassifier()
clf_tree = clf_tree.fit(X_train, y_train)

y_pred=clf_tree.predict(X_train)
In [35]:
trainScores['Tree-jaccard']=jaccard_similarity_score(y_train, y_pred)
trainScores['Tree-f1-score']=f1_score(y_train, y_pred, average='weighted')
In [36]:
trainScores
Out[36]:
{'KNN-f1-score': 0.77018435586819922,
 'KNN-jaccard': 0.7947976878612717,
 'Tree-f1-score': 0.92492702082098499,
 'Tree-jaccard': 0.9277456647398844}
Visualizng the tree
In [37]:
!pip install graphviz
!pip install pydotplus
import graphviz 
import pydotplus

dot_data = tree.export_graphviz(clf_tree, out_file=None, 
                     feature_names=['Principal',
                                    'terms','age',
                                    'Gender',
                                    'weekend',
                                    'Bechalor',
                                    'High School or Below',
                                    'college',
                                    'dayofweek',
                                     #'deadline'
#                                     ,'Month'
                                   ],  
                     class_names='loan_status',  
                     filled=True, rounded=True,  
                     special_characters=True) 

graph = pydotplus.graph_from_dot_data(dot_data)
graph.set_size('"8,8!"')
gvz_graph = graphviz.Source(graph.to_string())

gvz_graph
Collecting graphviz
  Downloading https://files.pythonhosted.org/packages/1f/e2/ef2581b5b86625657afd32030f90cf2717456c1d2b711ba074bf007c0f1a/graphviz-0.10.1-py2.py3-none-any.whl
Installing collected packages: graphviz
Successfully installed graphviz-0.10.1
Collecting pydotplus
  Downloading https://files.pythonhosted.org/packages/60/bf/62567830b700d9f6930e9ab6831d6ba256f7b0b730acb37278b0ccdffacf/pydotplus-2.0.2.tar.gz (278kB)
    100% |████████████████████████████████| 286kB 3.3MB/s eta 0:00:01
Requirement not upgraded as not directly required: pyparsing>=2.0.1 in /opt/conda/envs/DSX-Python35/lib/python3.5/site-packages (from pydotplus)
Building wheels for collected packages: pydotplus
  Running setup.py bdist_wheel for pydotplus ... done
  Stored in directory: /home/dsxuser/.cache/pip/wheels/35/7b/ab/66fb7b2ac1f6df87475b09dc48e707b6e0de80a6d8444e3628
Successfully built pydotplus
Installing collected packages: pydotplus
Successfully installed pydotplus-2.0.2
Out[37]:
SVG Image
Support Vector Machine
In [38]:
y_train=y_train.astype(float)
In [39]:
from sklearn import svm

clf_svm = svm.LinearSVC(random_state=7)
clf_svm.fit(X_train, y_train)  

y_pred=clf_svm.predict(X_train)
In [40]:
trainScores['SVM-jaccard']=jaccard_similarity_score(y_train, y_pred)
trainScores['SVM-f1-score']=f1_score(y_train, y_pred, average='weighted')
In [41]:
trainScores
Out[41]:
{'KNN-f1-score': 0.77018435586819922,
 'KNN-jaccard': 0.7947976878612717,
 'SVM-f1-score': 0.6689062277741139,
 'SVM-jaccard': 0.75144508670520227,
 'Tree-f1-score': 0.92492702082098499,
 'Tree-jaccard': 0.9277456647398844}
Logistic Regression
In [58]:
from sklearn.linear_model import LogisticRegression

clf_log = LogisticRegression(random_state=0, solver='lbfgs',
                         multi_class='multinomial')
clf_log.fit(X_train, y_train)

y_pred=clf_log.predict(X_train)
y_proba=clf_log.predict_proba(X_train)
In [59]:
testScores['LogReg-logLoss']=log_loss(testy, proba)

trainScores['LogReg-jaccard']=jaccard_similarity_score(y_train, y_pred)
trainScores['LogReg-f1-score']=f1_score(y_train, y_pred, average='weighted')  
trainScores['LogReg-logLoss']=log_loss(y_train, y_proba)
In [60]:
trainScores
Out[60]:
{'KNN-f1-score': 0.77018435586819922,
 'KNN-jaccard': 0.7947976878612717,
 'LogReg-f1-score': 0.70883990371506023,
 'LogReg-jaccard': 0.76300578034682076,
 'LogReg-logLoss': 0.47022255664816026,
 'SVM-f1-score': 0.6689062277741139,
 'SVM-jaccard': 0.75144508670520227,
 'Tree-f1-score': 0.92492702082098499,
 'Tree-jaccard': 0.9277456647398844}
Model Evaluation using Test set
In [45]:
!wget -O loan_test.csv https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/ML0101ENv3/labs/loan_test.csv
--2019-02-02 07:01:27--  https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/ML0101ENv3/labs/loan_test.csv
Resolving s3-api.us-geo.objectstorage.softlayer.net (s3-api.us-geo.objectstorage.softlayer.net)... 67.228.254.193
Connecting to s3-api.us-geo.objectstorage.softlayer.net (s3-api.us-geo.objectstorage.softlayer.net)|67.228.254.193|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 3642 (3.6K) [text/csv]
Saving to: ‘loan_test.csv’

100%[======================================>] 3,642       --.-K/s   in 0s      

2019-02-02 07:01:27 (662 MB/s) - ‘loan_test.csv’ saved [3642/3642]

Load Test set for evaluation
In [46]:
test_df = pd.read_csv('loan_test.csv')
test_df.head()
Out[46]:
Unnamed: 0	Unnamed: 0.1	loan_status	Principal	terms	effective_date	due_date	age	education	Gender
0	1	1	PAIDOFF	1000	30	9/8/2016	10/7/2016	50	Bechalor	female
1	5	5	PAIDOFF	300	7	9/9/2016	9/15/2016	35	Master or Above	male
2	21	21	PAIDOFF	1000	30	9/10/2016	10/9/2016	43	High School or Below	female
3	24	24	PAIDOFF	1000	30	9/10/2016	10/9/2016	26	college	male
4	35	35	PAIDOFF	800	15	9/11/2016	9/25/2016	29	Bechalor	male
In [47]:
test_df['due_date'] = pd.to_datetime(test_df['due_date'])
test_df['effective_date'] = pd.to_datetime(test_df['effective_date'])

test_df['dayofweek'] = test_df['effective_date'].dt.dayofweek

test_df['weekend'] = test_df['dayofweek'].apply(lambda x: 1 if (x>3)  else 0)

test_df['Gender'].replace(to_replace=['male','female'], value=[0,1],inplace=True)

# test_df['Month'] = test_df.due_date.dt.month 

# test_df['deadline']=test_df['due_date']-test_df['effective_date']
# test_df['deadline']=test_df['deadline'].dt.days

Feature = test_df[['Principal','terms','age','Gender','weekend','dayofweek']]
Feature = pd.concat([Feature,pd.get_dummies(test_df['education'])], axis=1)
Feature.drop(['Master or Above'], axis = 1,inplace=True)

X = Feature

y = test_df['loan_status'].replace(to_replace=['PAIDOFF','COLLECTION'], value=[0,1]).values

testy=y.astype(float)
testX= preprocessing.StandardScaler().fit_transform(X)
In [48]:
testScores={}
In [49]:
knn_pred=clf_knn.predict(testX)
testScores['KNN-jaccard']=jaccard_similarity_score(testy, knn_pred)
testScores['KNN-f1-score']=f1_score(testy, knn_pred, average='weighted')
In [50]:
tree_pred=clf_tree.predict(testX)
testScores['Tree-jaccard']=jaccard_similarity_score(testy, tree_pred)
testScores['Tree-f1-score']=f1_score(testy, tree_pred, average='weighted')
In [51]:
svm_pred=clf_svm.predict(testX)
testScores['SVM-jaccard']=jaccard_similarity_score(testy, svm_pred)
testScores['SVM-f1-score']=f1_score(testy, svm_pred, average='weighted')
In [53]:
log_pred=clf_log.predict(testX)
proba=clf_log.predict_proba(testX)
testScores['LogReg-jaccard']=jaccard_similarity_score(testy, log_pred)
testScores['LogReg-f1-score']=f1_score(testy, log_pred, average='weighted')  
testScores['LogReg-logLoss']=log_loss(testy, proba)
In [54]:
trainScores
Out[54]:
{'KNN-f1-score': 0.77018435586819922,
 'KNN-jaccard': 0.7947976878612717,
 'LogReg-f1-score': 0.70883990371506023,
 'LogReg-jaccard': 0.76300578034682076,
 'LogReg-logLoss': 8.1855134692398206,
 'SVM-f1-score': 0.6689062277741139,
 'SVM-jaccard': 0.75144508670520227,
 'Tree-f1-score': 0.92492702082098499,
 'Tree-jaccard': 0.9277456647398844}
In [55]:
testScores
Out[55]:
{'KNN-f1-score': 0.71443113303578432,
 'KNN-jaccard': 0.7407407407407407,
 'LogReg-f1-score': 0.708937198067633,
 'LogReg-jaccard': 0.77777777777777779,
 'LogReg-logLoss': 0.4947139205467741,
 'SVM-f1-score': 0.69592281356987229,
 'SVM-jaccard': 0.7592592592592593,
 'Tree-f1-score': 0.76188628611151532,
 'Tree-jaccard': 0.7592592592592593}
In [61]:
# Features used
list(Feature.columns)
Out[61]:
['Principal',
 'terms',
 'age',
 'Gender',
 'weekend',
 'dayofweek',
 'Bechalor',
 'High School or Below',
 'college']
Reports
Algorithm	Jaccard	F1-score	LogLoss
KNN	0.7407	0.7144	NA
Decision Tree	0.7592	0.7618	NA
SVM	0.7592	0.6959	NA
LogisticRegression	0.7777	0.7089	0.4947
Even though Decision tree had shown a relatively good result in trainig ,but it is Logistic Regression that out-performs the other models in test .
out tree model suffers from over-fitting
